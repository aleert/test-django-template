Welcome to test-django-template's documentation!
================================================

This project is a weird child of `wemake-django-template`_ and
`cookiecutter-django`_ django templates, spiced up with some of
my additions here and there.

It's not better than any of them - just more like of my playground
for django development setup.

It's currently suited to bootstrap your local development,
offering almost nothing for production environment bootstrapping.


How to use it
-------------

First, you need to install `cookiecutter`_ with

.. code-block:: shell

   pip install cookiecutter

Next run

.. code-block::

   cookiecutter https://github.com/aleert/test-django-template

You'll be prompted for project name, it has to be valid python identifier.

Note also that project name should't be a SQL keyword since autogenerated
scripts for database creation will use project name as a database name.

When the project will be created, a ``README.rst`` will be created within it.
It contains the description on how to start project with Docker or locally.

Essentially what this project is offering you is some scripts to
create environment files and a structure, that separates project in a
manageable blocks.

What is the structure?
----------------------

While ``manage.py`` located in top-level dir,
actual django project is located in ``server/``, with settings files
located in ``server/settings/`` and all apps located in
``server/apps/``.

``sql/`` folder is a place where autogenerated scripts for local development
will be placed.

``docker/`` is a place you should put your custom Dockerfiles (or edit default ones).

``.envs/`` folder is a place where autogenerated templates are put into.

Note that we have two env files for django. ``.django`` is used for docker
setup and ``.env`` file is there for local development (and is called that
way because `python-decouple`_ expects it.


On some design decisions:
-------------------------

pip over Poetry
~~~~~~~~~~~~~~~

I love `Poetry`_, but decided to go with pip to support requirement files for
multiple environments (currently there are local and production, but staging
might be added in the future).

Though switching to Poetry is still a possibility I consider.

django-split-settings
~~~~~~~~~~~~~~~~~~~~~

`Django-split-setting`_ is a great project, but i don't use it here for the
following reasons:

1. I want to experiment with settings organization to get a better grasp of it.
2. There's a lot of magic going on inside ``django-split-settings``
   so I feel I should first find some time to go through it's source and figure
   out how it works.
3. Less dependencies (though i think it's a manageable one).

explicit settings file
~~~~~~~~~~~~~~~~~~~~~~

If you'll try to run project generated from this template locally
you'll find out, that you must specify settings file you use explicitly,
as there's no default one. In the beginning, ``local`` settings were used
but ``manage.py`` issued warning that you use non-production settings,
now i feel that it's better just to add it explicitly.

As for docker, well, there's no default Dockerfiles for production,
so you can specify any settings you want when building one.

TODOs
-----

Here's some things i'd like to implement in the future:

- sensible production settings
- add pre-commit hooks for testing
- add robots.txt and humans.txt
- consider using pytest-cov
- take care of ``.pytest_cache/`` cannot be removed without sudo


.. _cookiecutter-django: https://github.com/pydanny/cookiecutter-django
.. _wemake-django-template: https://github.com/wemake-services/wemake-django-template
.. _Django-split-setting: https://github.com/sobolevn/django-split-settings
.. _Poetry: https://python-poetry.org/
.. _python-decouple: https://github.com/henriquebastos/python-decouple
.. _cookiecutter: https://github.com/cookiecutter/cookiecutter
